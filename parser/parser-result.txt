Step1:
StateStack:0 
SymbolStack:# 
action:s3
Step2:
StateStack:0 3 
SymbolStack:# int 
action:r2
Step3:
StateStack:0 2 
SymbolStack:# type 
action:s5
Step4:
StateStack:0 2 5 
SymbolStack:# type identifier 
action:s6
Step5:
StateStack:0 2 5 6 
SymbolStack:# type identifier ( 
action:s11
Step6:
StateStack:0 2 5 6 11 
SymbolStack:# type identifier ( int 
action:s14
Step7:
StateStack:0 2 5 6 11 14 
SymbolStack:# type identifier ( int identifier 
action:r8
Step8:
StateStack:0 2 5 6 10 
SymbolStack:# type identifier ( para 
action:s13
Step9:
StateStack:0 2 5 6 10 13 
SymbolStack:# type identifier ( para , 
action:s11
Step10:
StateStack:0 2 5 6 10 13 11 
SymbolStack:# type identifier ( para , int 
action:s14
Step11:
StateStack:0 2 5 6 10 13 11 14 
SymbolStack:# type identifier ( para , int identifier 
action:r8
Step12:
StateStack:0 2 5 6 10 13 10 
SymbolStack:# type identifier ( para , para 
action:s13
Step13:
StateStack:0 2 5 6 10 13 10 13 
SymbolStack:# type identifier ( para , para , 
action:s11
Step14:
StateStack:0 2 5 6 10 13 10 13 11 
SymbolStack:# type identifier ( para , para , int 
action:s14
Step15:
StateStack:0 2 5 6 10 13 10 13 11 14 
SymbolStack:# type identifier ( para , para , int identifier 
action:r8
Step16:
StateStack:0 2 5 6 10 13 10 13 10 
SymbolStack:# type identifier ( para , para , para 
action:r6
Step17:
StateStack:0 2 5 6 10 13 10 13 17 
SymbolStack:# type identifier ( para , para , para_list 
action:r7
Step18:
StateStack:0 2 5 6 10 13 17 
SymbolStack:# type identifier ( para , para_list 
action:r7
Step19:
StateStack:0 2 5 6 8 
SymbolStack:# type identifier ( para_list 
action:r4
Step20:
StateStack:0 2 5 6 7 
SymbolStack:# type identifier ( formal_para 
action:s12
Step21:
StateStack:0 2 5 6 7 12 
SymbolStack:# type identifier ( formal_para ) 
action:s16
Step22:
StateStack:0 2 5 6 7 12 16 
SymbolStack:# type identifier ( formal_para ) { 
action:s21
Step23:
StateStack:0 2 5 6 7 12 16 21 
SymbolStack:# type identifier ( formal_para ) { int 
action:s34
Step24:
StateStack:0 2 5 6 7 12 16 21 34 
SymbolStack:# type identifier ( formal_para ) { int identifier 
action:r13
Step25:
StateStack:0 2 5 6 7 12 16 20 
SymbolStack:# type identifier ( formal_para ) { inter_argument_declaration 
action:s33
Step26:
StateStack:0 2 5 6 7 12 16 20 33 
SymbolStack:# type identifier ( formal_para ) { inter_argument_declaration ; 
action:s21
Step27:
StateStack:0 2 5 6 7 12 16 20 33 21 
SymbolStack:# type identifier ( formal_para ) { inter_argument_declaration ; int 
action:s34
Step28:
StateStack:0 2 5 6 7 12 16 20 33 21 34 
SymbolStack:# type identifier ( formal_para ) { inter_argument_declaration ; int identifier 
action:r13
Step29:
StateStack:0 2 5 6 7 12 16 20 33 20 
SymbolStack:# type identifier ( formal_para ) { inter_argument_declaration ; inter_argument_declaration 
action:s33
Step30:
StateStack:0 2 5 6 7 12 16 20 33 20 33 
SymbolStack:# type identifier ( formal_para ) { inter_argument_declaration ; inter_argument_declaration ; 
action:r11
Step31:
StateStack:0 2 5 6 7 12 16 20 33 48 
SymbolStack:# type identifier ( formal_para ) { inter_argument_declaration ; inter_declaration 
action:r12
Step32:
StateStack:0 2 5 6 7 12 16 18 
SymbolStack:# type identifier ( formal_para ) { inter_declaration 
action:s27
Step33:
StateStack:0 2 5 6 7 12 16 18 27 
SymbolStack:# type identifier ( formal_para ) { inter_declaration identifier 
action:s36
Step34:
StateStack:0 2 5 6 7 12 16 18 27 36 
SymbolStack:# type identifier ( formal_para ) { inter_declaration identifier = 
action:s43
Step35:
StateStack:0 2 5 6 7 12 16 18 27 36 43 
SymbolStack:# type identifier ( formal_para ) { inter_declaration identifier = number 
action:r41
Step36:
StateStack:0 2 5 6 7 12 16 18 27 36 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration identifier = divisor 
action:r38
Step37:
StateStack:0 2 5 6 7 12 16 18 27 36 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration identifier = item 
action:r35
Step38:
StateStack:0 2 5 6 7 12 16 18 27 36 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration identifier = add_expression 
action:r26
Step39:
StateStack:0 2 5 6 7 12 16 18 27 36 49 
SymbolStack:# type identifier ( formal_para ) { inter_declaration identifier = expression 
action:s69
Step40:
StateStack:0 2 5 6 7 12 16 18 27 36 49 69 
SymbolStack:# type identifier ( formal_para ) { inter_declaration identifier = expression ; 
action:r20
Step41:
StateStack:0 2 5 6 7 12 16 18 26 
SymbolStack:# type identifier ( formal_para ) { inter_declaration assign_state 
action:r19
Step42:
StateStack:0 2 5 6 7 12 16 18 22 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state 
action:s30
Step43:
StateStack:0 2 5 6 7 12 16 18 22 30 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if 
action:s46
Step44:
StateStack:0 2 5 6 7 12 16 18 22 30 46 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( 
action:s44
Step45:
StateStack:0 2 5 6 7 12 16 18 22 30 46 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( identifier 
action:r44
Step46:
StateStack:0 2 5 6 7 12 16 18 22 30 46 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( divisor 
action:r38
Step47:
StateStack:0 2 5 6 7 12 16 18 22 30 46 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( item 
action:r35
Step48:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression 
action:s54
Step49:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 54 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression > 
action:r31
Step50:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop 
action:s40
Step51:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( 
action:s44
Step52:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( identifier 
action:r44
Step53:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( divisor 
action:r38
Step54:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( item 
action:s60
Step55:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 41 60 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( item + 
action:s44
Step56:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 41 60 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( item + identifier 
action:r44
Step57:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 41 60 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( item + divisor 
action:r38
Step58:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 41 60 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( item + item 
action:r35
Step59:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 41 60 73 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( item + add_expression 
action:r36
Step60:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 58 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( add_expression 
action:r26
Step61:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 59 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( expression 
action:s72
Step62:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 40 59 72 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop ( expression ) 
action:r42
Step63:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop divisor 
action:r38
Step64:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop item 
action:r35
Step65:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop add_expression 
action:r26
Step66:
StateStack:0 2 5 6 7 12 16 18 22 30 46 39 51 70 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( add_expression relop expression 
action:r28
Step67:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression 
action:s89
Step68:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) 
action:s104
Step69:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { 
action:s27
Step70:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier 
action:s36
Step71:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = 
action:s44
Step72:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = identifier 
action:r44
Step73:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = divisor 
action:r38
Step74:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item 
action:s60
Step75:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + 
action:s74
Step76:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( 
action:s44
Step77:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( identifier 
action:r44
Step78:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( divisor 
action:s62
Step79:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 42 62 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( divisor * 
action:s44
Step80:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 42 62 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( divisor * identifier 
action:r44
Step81:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 42 62 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( divisor * divisor 
action:r38
Step82:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 42 62 76 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( divisor * item 
action:r39
Step83:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( item 
action:s60
Step84:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 41 60 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( item + 
action:s43
Step85:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 41 60 43 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( item + number 
action:r41
Step86:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 41 60 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( item + divisor 
action:r38
Step87:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 41 60 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( item + item 
action:r35
Step88:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 41 60 73 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( item + add_expression 
action:r36
Step89:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( add_expression 
action:r26
Step90:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 59 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( expression 
action:s72
Step91:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 74 59 72 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + ( expression ) 
action:r42
Step92:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + divisor 
action:r38
Step93:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + item 
action:r35
Step94:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 41 60 73 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = item + add_expression 
action:r36
Step95:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = add_expression 
action:r26
Step96:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 49 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = expression 
action:s69
Step97:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 27 36 49 69 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { identifier = expression ; 
action:r20
Step98:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 26 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { assign_state 
action:r19
Step99:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 22 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { state 
action:r14
Step100:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 120 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { state_string 
action:s126
Step101:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 104 120 126 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) { state_string } 
action:r10
Step102:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block 
action:s121
Step103:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else 
action:s102
Step104:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { 
action:s27
Step105:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 27 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { identifier 
action:s36
Step106:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 27 36 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { identifier = 
action:s44
Step107:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 27 36 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { identifier = identifier 
action:r44
Step108:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 27 36 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { identifier = divisor 
action:r38
Step109:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 27 36 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { identifier = item 
action:r35
Step110:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 27 36 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { identifier = add_expression 
action:r26
Step111:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 27 36 49 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { identifier = expression 
action:s69
Step112:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 27 36 49 69 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { identifier = expression ; 
action:r20
Step113:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 26 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { assign_state 
action:r19
Step114:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 22 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { state 
action:r14
Step115:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 118 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { state_string 
action:s124
Step116:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 102 118 124 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else { state_string } 
action:r10
Step117:
StateStack:0 2 5 6 7 12 16 18 22 30 46 68 89 105 121 127 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if ( expression ) state_block else state_block 
action:r25
Step118:
StateStack:0 2 5 6 7 12 16 18 22 23 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state if_state 
action:r16
Step119:
StateStack:0 2 5 6 7 12 16 18 22 22 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state 
action:s29
Step120:
StateStack:0 2 5 6 7 12 16 18 22 22 29 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while 
action:s45
Step121:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( 
action:s44
Step122:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( identifier 
action:r44
Step123:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( divisor 
action:r38
Step124:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( item 
action:r35
Step125:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( add_expression 
action:s53
Step126:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 39 53 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( add_expression <= 
action:r30
Step127:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 39 51 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( add_expression relop 
action:s43
Step128:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 39 51 43 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( add_expression relop number 
action:r41
Step129:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 39 51 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( add_expression relop divisor 
action:r38
Step130:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 39 51 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( add_expression relop item 
action:r35
Step131:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 39 51 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( add_expression relop add_expression 
action:r26
Step132:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 39 51 70 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( add_expression relop expression 
action:r28
Step133:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression 
action:s88
Step134:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) 
action:s102
Step135:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { 
action:s27
Step136:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier 
action:s36
Step137:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = 
action:s44
Step138:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = identifier 
action:r44
Step139:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = divisor 
action:s62
Step140:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 42 62 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = divisor * 
action:s43
Step141:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 42 62 43 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = divisor * number 
action:r41
Step142:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 42 62 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = divisor * divisor 
action:r38
Step143:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 42 62 76 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = divisor * item 
action:r39
Step144:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = item 
action:r35
Step145:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = add_expression 
action:r26
Step146:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 49 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = expression 
action:s69
Step147:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 27 36 49 69 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { identifier = expression ; 
action:r20
Step148:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 26 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { assign_state 
action:r19
Step149:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 22 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { state 
action:r14
Step150:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 118 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { state_string 
action:s124
Step151:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 102 118 124 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) { state_string } 
action:r10
Step152:
StateStack:0 2 5 6 7 12 16 18 22 22 29 45 67 88 103 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while ( expression ) state_block 
action:r23
Step153:
StateStack:0 2 5 6 7 12 16 18 22 22 24 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state while_state 
action:r17
Step154:
StateStack:0 2 5 6 7 12 16 18 22 22 22 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state 
action:s28
Step155:
StateStack:0 2 5 6 7 12 16 18 22 22 22 28 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state return 
action:s44
Step156:
StateStack:0 2 5 6 7 12 16 18 22 22 22 28 44 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state return identifier 
action:r44
Step157:
StateStack:0 2 5 6 7 12 16 18 22 22 22 28 42 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state return divisor 
action:r38
Step158:
StateStack:0 2 5 6 7 12 16 18 22 22 22 28 41 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state return item 
action:r35
Step159:
StateStack:0 2 5 6 7 12 16 18 22 22 22 28 39 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state return add_expression 
action:r26
Step160:
StateStack:0 2 5 6 7 12 16 18 22 22 22 28 38 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state return expression 
action:s50
Step161:
StateStack:0 2 5 6 7 12 16 18 22 22 22 28 38 50 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state return expression ; 
action:r22
Step162:
StateStack:0 2 5 6 7 12 16 18 22 22 22 25 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state return_state 
action:r18
Step163:
StateStack:0 2 5 6 7 12 16 18 22 22 22 22 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state state 
action:r14
Step164:
StateStack:0 2 5 6 7 12 16 18 22 22 22 35 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state state_string 
action:r15
Step165:
StateStack:0 2 5 6 7 12 16 18 22 22 35 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state state_string 
action:r15
Step166:
StateStack:0 2 5 6 7 12 16 18 22 35 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state state_string 
action:r15
Step167:
StateStack:0 2 5 6 7 12 16 18 31 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state_string 
action:s47
Step168:
StateStack:0 2 5 6 7 12 16 18 31 47 
SymbolStack:# type identifier ( formal_para ) { inter_declaration state_string } 
action:r9
Step169:
StateStack:0 2 5 6 7 12 15 
SymbolStack:# type identifier ( formal_para ) state_block 
action:r1
Step170:
StateStack:0 1 
SymbolStack:# program 
action:a0
Parsing Success!
